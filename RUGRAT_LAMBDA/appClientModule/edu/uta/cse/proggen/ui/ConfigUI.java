/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ConfigUI.java
 *
 * Created on Dec 1, 2010, 4:32:24 PM
 */

package edu.uta.cse.proggen.ui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Set;

import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import edu.uta.cse.proggen.start.Start;

/**
 * The configuration UI for RUGRAT. Also the graphical entry point
 * to the code generation tool.
 * 
 * @author balamurugan
 */
public class ConfigUI extends javax.swing.JFrame {
	
	/** File to save configuration settings into */
	private File configFile = new File("config.xml");

    /** Creates new form ConfigUI */
    public ConfigUI() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
    	
    	jPanel1 = new JPanel();
    	jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jTextField9 = new javax.swing.JTextField();
        jTextField10 = new javax.swing.JTextField();
        jTextField11 = new javax.swing.JTextField();
        jTextField12 = new javax.swing.JTextField();
        jTextField13 = new javax.swing.JTextField();
        jTextField14 = new javax.swing.JTextField();
        jTextField15 = new javax.swing.JTextField();
        jTextField16 = new javax.swing.JTextField();
        jTextField17 = new javax.swing.JTextField();
        jTextField18 = new javax.swing.JTextField();
        jTextField19 = new javax.swing.JTextField();
        jTextField20 = new javax.swing.JTextField();
        jTextField21 = new javax.swing.JPasswordField();
        jTextField22 = new javax.swing.JTextField();
        jTextField23 = new javax.swing.JTextField();
        jTextField24 = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        jCheckBox7 = new javax.swing.JCheckBox();
        jCheckBox8 = new javax.swing.JCheckBox();
        jCheckBox9 = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButtonLoad = new JButton();
        jButtonSave = new JButton();
        jFileChooser = new JFileChooser();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        // minNoOfParameters
        jTextField25 = new javax.swing.JTextField();
        jLabel26 	= new javax.swing.JLabel();
        
        //minInheritanceDepth
        jTextMinInherit = new javax.swing.JTextField();
        jLabelMinInherit = new javax.swing.JLabel();
        
        //maxValueForLoop
        jTextMaxForLoop = new javax.swing.JTextField();
        jLabelMaxForLoop = new javax.swing.JLabel();
        
        //AllowArrayAsClassField
        jTextAllowArray = new JTextField();
        jLabelAllowArray = new JLabel();
        
        //minNoOfClassFields
        jTextMinNoOfClassFields = new JTextField();
        jLabelMinNoOfClassFields = new JLabel();
        
        //doReachabilityMatrix
        jTextReachability = new JTextField();
        jLabelReachability = new JLabel();
        
        //maxInterfacesToImplement
        jTextMaxInterfaceToImplement = new JTextField();
        jLabelMaxInterfaceToImplement = new JLabel();
        
        //allowIndirectRecursion
        jTextAllowIndirectRecursion = new JTextField();
        jLabelAllowIndirectRecursion = new JLabel();
        
        
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        
        setTitle("Random Utility GeneRator for Analysis and Testing (RUGRAT)");

        jTextField1.setName("className"); // NOI18N
        jLabel1.setToolTipText("Prefix classname for the classes to be generated");
        jTextField1.setPreferredSize(null);

        jTextField2.setName("maxNoOfClassFields"); // NOI18N
        jLabel2.setToolTipText("Max. number of class members to generate");
        
        jTextMinNoOfClassFields.setName("minNoOfClassFields");
        jLabelMinNoOfClassFields.setToolTipText("Min. number of class members to generate");
        
        
        jTextField3.setName("probability"); // NOI18N
        jLabel3.setToolTipText(
        		"Probability in integer value(less than 100) to select statements. Recommended value less than 30.");
        
        jTextField4.setName("totalLOC"); // NOI18N
        jLabel4.setToolTipText("Total lines of code to be generated");

        jTextField5.setName("maxNestedIfs"); // NOI18N
        jLabel5.setToolTipText("Maximum number of nested if's per method");

        jTextField6.setName("maxMethodCalls"); // NOI18N
        jLabel6.setToolTipText("Maximum allowed method calls per method definition");

        jTextField7.setName("noOfClasses"); // NOI18N
        jLabel7.setToolTipText("Number of classes to generate");

        jTextField8.setName("maxInheritanceDepth"); // NOI18N
        jLabel8.setToolTipText("Maximum depth of inheritance. For example depth of 3 : A-B-C");
        
        jTextMinInherit.setName("minInheritanceDepth");
        jLabelMinInherit.setToolTipText("Minimum depth of inheritance.");

        jTextField9.setName("noOfInheritanceChains"); // NOI18N
        jLabel9.setToolTipText("Number of inheritance chains. If depth is 2: A-B-C, E-F");

        jTextField10.setName("noOfInterfaces"); // NOI18N
        jLabel10.setToolTipText("Number of interfaces to generate.");
        
        jTextMaxInterfaceToImplement.setName("maxInterfacesToImplement");
        jLabelMaxInterfaceToImplement.setToolTipText("Max. number of interfaces a class can implement");

        jTextField11.setName("injectFilename"); // NOI18N
        jLabel11.setToolTipText("Filename whose contents are to be injected into every generated class.");

        jTextField12.setName("maxParametersPerMethod"); // NOI18N
        jLabel12.setToolTipText("Maximum no. of parameters per method.");
        
        //minNoOfParameters
        jTextField25.setName("minParametersPerMethod");
        jLabel26.setToolTipText("Minimum no. of parameters per method.");
        
        //maxValueForLoop
        jTextMaxForLoop.setName("maxValueForLoop");
        jLabelMaxForLoop.setToolTipText("Maximum value allowed for loop condition");

        jTextField13.setName("maxMethodsPerClass"); // NOI18N
        jLabel13.setToolTipText("Maximum number of methods per class");

        jTextField14.setName("maxMethodsPerInterface"); // NOI18N
        jLabel14.setToolTipText("Maximum number of methods per interface");

        jTextField15.setName("maxRecursionDepth"); // NOI18N
        jLabel15.setToolTipText("Maximum recursion depth");

        jTextField16.setName("maxArraySize"); // NOI18N
        jLabel16.setToolTipText("Maximum array size, ignore if you do not allow arrays as class fields.");
        
        jTextAllowArray.setName("allowArray");
        jLabelAllowArray.setToolTipText("Allow arrays as class field? Type either 'YES' or 'NO'");
        
        jTextField17.setName("maxIntLiteral");
        jLabel18.setToolTipText("Enter the maximum integer literal value");
        
        jTextField18.setName("queryFilename");
        jLabel19.setToolTipText("Enter the file name containing queries");
        
        jTextField19.setName("recursionProbability");
        jLabel20.setToolTipText("Enter the probability for recursive method calls");
        
        jTextField20.setName("dbUsername");
        jLabel21.setToolTipText("Enter the database username");
        
        jTextField21.setName("password");
        jLabel22.setToolTipText("Enter the database password");
        
        jTextField22.setName("dbName");
        jLabel23.setToolTipText("Enter the database name");
        
        jTextField23.setName("dbDriver");
        jLabel24.setToolTipText("Enter the JDBC driver name");
        
        jTextField24.setName("callType");
        jLabel25.setToolTipText("MCO1_1: local calls with recursion check; MCO1_2: local calls with not recursion check;"
        		+ " MCO2_1: cross-class calls with recursion check; MCO2_2: cross-class calls with no recursion check" );
        
        jTextAllowIndirectRecursion.setName("allowIndirectRecursion");
        jLabelAllowIndirectRecursion.setToolTipText("CAUSION: Setting it to 'YES' might result into generating programs that throw StackOverflowError in runtime. ");
        jTextAllowIndirectRecursion.setText("NO");
        
        jTextReachability.setName("reachabiltyMatrix");
        jTextReachability.setText("NO");
        jLabelReachability.setToolTipText("This will create a matrix of method caller-callee, it requires much memory space to build.");

        jCheckBox1.setText("char");
        jCheckBox1.setName("char"); // NOI18N

        jCheckBox2.setText("byte");
        jCheckBox2.setName("byte"); // NOI18N

        jCheckBox3.setText("short");
        jCheckBox3.setName("short"); // NOI18N

        jCheckBox4.setText("int");
        jCheckBox4.setName("int"); // NOI18N

        jCheckBox5.setText("long");
        jCheckBox5.setName("long"); // NOI18N

        jCheckBox6.setText("float");
        jCheckBox6.setName("float"); // NOI18N

        jCheckBox7.setText("double");
        jCheckBox7.setName("double"); // NOI18N
        
        jCheckBox8.setText("String");
        jCheckBox8.setName("String"); // NOI18N

        jCheckBox9.setText("Object");
        jCheckBox9.setName("Object"); // NOI18N

        jLabel1.setText("Class name prefix");

        jLabel2.setText("Max. number of class fields");
        
        jLabelMinNoOfClassFields.setText("Min. number of class fields");

        jLabel3.setText("Probability");

        jLabel4.setText("Total lines of code");

        jLabel5.setText("Max. nested Ifs per method");

        jLabel6.setText("Max. allowed method calls");

        jLabel7.setText("Number of classes to generate");

        jLabel8.setText("Maximum inheritance depth");
        
        jLabelMinInherit.setText("Minimum inheritance depth");

        jLabel9.setText("Number of inheritance chains");

        jLabel10.setText("Number of Interfaces to generate");
        
        jLabelMaxInterfaceToImplement.setText("Max. number of interfaces a class can implement");

        jLabel11.setText("Inject File Name");

        jLabel12.setText("Max. number of parameters per method");
        
        jLabel26.setText("Min. number of parameters per method");

        jLabel13.setText("Max. number of methods per class");

        jLabel14.setText("Max. number of methods per interface");

        jLabel15.setText("Max. recursion depth");
        
        jLabelAllowArray.setText("Allow arrays as class field? (YES/NO)");

        jLabel16.setText("Max. array size");
        
        jLabelMaxForLoop.setText("Max. value for loop upper limits");
        
        jLabel18.setText("Max. integer literal");
        
        jLabel19.setText("Query file name");
        
        jLabel20.setText("Recursion probability");
        
        jLabel21.setText("Database username");
        
        jLabel22.setText("Database password");
        
        jLabel23.setText("Database name");
        
        jLabel24.setText("JDBC driver");
        
        jLabel25.setText("Method call type: (see tooltip for codes)");
        
        jLabelAllowIndirectRecursion.setText("Allow indirect recursion (e.g. A-B-A )? (YES/NO)");
        
        jLabelReachability.setText("Create Reachability Matrix? (YES/NO)");

        jButton1.setText("Generate");
        jButton1.setName("generate"); // NOI18N
        jButton1.addActionListener(new ActionListener() {
			
			public void actionPerformed(ActionEvent e) 
			{
				
				processAndWriteToXML();	
				execute();
				
			}
		});
        
        jFileChooser.setDialogTitle("Choose configuration file (an xml file) to load");
        jFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        jButtonLoad.setText("Load existing config file");
        jButtonLoad.setName("load");
        jButtonLoad.addActionListener(new ActionListener() {
			
			public void actionPerformed(ActionEvent e) {
				loadExistingConfigFile();
				
			}
		});
        
        jButtonSave.setText("Save current setting");
        jButtonSave.setName("save");
        
        jButtonSave.addActionListener(new ActionListener() {			
			@Override
			public void actionPerformed(ActionEvent e) {
				saveConfigToAFile();				
			}			
		});
        
             

        jLabel17.setText("Select Allowed types");

        add(jPanel1);
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabelMinNoOfClassFields)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabelMinInherit)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10)
                            .addComponent(jLabelMaxInterfaceToImplement)
                            .addComponent(jLabel11)
                            .addComponent(jLabel13)
                            .addComponent(jLabel14)
                            .addComponent(jLabel15)
                            .addComponent(jLabel16)
                            .addComponent(jLabelAllowArray)
                            .addComponent(jLabelMaxForLoop)
                            .addComponent(jLabel12)
                            .addComponent(jLabel17)
                            .addComponent(jLabel18)
                            .addComponent(jLabel19)
                            .addComponent(jLabel20)
                            .addComponent(jLabel21)
                            .addComponent(jLabel22)
                            .addComponent(jLabel23)
                            .addComponent(jLabel24)
                            .addComponent(jLabel25)
                            .addComponent(jLabelAllowIndirectRecursion)
                            .addComponent(jLabelReachability)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel26))
                        .addGap(51, 51, 51)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextMinInherit, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextMaxInterfaceToImplement, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextField25, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextField15, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextAllowArray, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextField16, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextMaxForLoop, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextField17, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextField18, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextField19, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextField20, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextField21, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextField22, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextField23, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextField24, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextAllowIndirectRecursion, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextReachability, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextMinNoOfClassFields, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jCheckBox1)
                                            .addComponent(jCheckBox4))
                                        .addGap(31, 31, 31)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jCheckBox2)
                                            .addComponent(jCheckBox5)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jCheckBox7)
                                        .addGap(18, 18, 18)
                                        .addComponent(jCheckBox8)))
                                .addGap(25, 25, 25)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckBox9)
                                    .addComponent(jCheckBox6)
                                    .addComponent(jCheckBox3)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(255, 255, 255)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(255, 255, 255)
                        .addComponent(jButtonLoad))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(255, 255, 255)
                                .addComponent(jButtonSave)))
                   
                .addContainerGap(39, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelMinNoOfClassFields)
                    .addComponent(jTextMinNoOfClassFields, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelMinInherit)
                    .addComponent(jTextMinInherit, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))                
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelMaxInterfaceToImplement)
                    .addComponent(jTextMaxInterfaceToImplement, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(jTextField25, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)                
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(jTextField15, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelAllowArray)
                    .addComponent(jTextAllowArray, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(jTextField16, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelMaxForLoop)
                    .addComponent(jTextMaxForLoop, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)    
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(jTextField17, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(jTextField18, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(jTextField19, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(jTextField20, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(jTextField21, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(jTextField22, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(jTextField23, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(17, 17, 17)                
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                		.addComponent(jLabel25)
                		.addComponent(jTextField24, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                		.addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                	.addComponent(jLabelAllowIndirectRecursion)
                    .addComponent(jTextAllowIndirectRecursion, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(17, 17, 17)		
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                		.addComponent(jLabelReachability)
                		.addComponent(jTextReachability, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                		.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)               
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(jCheckBox3)
                    .addComponent(jCheckBox1)
                    .addComponent(jCheckBox2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox5)
                    .addComponent(jCheckBox6)
                    .addComponent(jCheckBox4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox7)
                    .addComponent(jCheckBox8)
                    .addComponent(jCheckBox9))
                .addGap(37, 37, 37)
                .addComponent(jButtonLoad)
                .addGap(37, 37, 37)
                .addComponent(jButtonSave)
                .addGap(37, 37, 37)
                .addComponent(jButton1)
                .addContainerGap(19, Short.MAX_VALUE))
        );
        
        add(new JScrollPane(jPanel1, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED));
        

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void execute() {
		String[] args = {};
		String labelString = "Interface and class generation started. Refer the console for logs and progress.";
		JOptionPane.showMessageDialog(this, labelString, "Information", JOptionPane.INFORMATION_MESSAGE);
		this.setVisible(false);
		Start.main(args);
		System.exit(0);		
	}
    
    /** Saves configuration to a file without executing the program */
    private void saveConfigToAFile() {
    	// To suggest a default file name
    	//http://stackoverflow.com/questions/356671/jfilechooser-showsavedialog-how-to-set-suggested-file-name
    	jFileChooser.setSelectedFile(configFile);
		int retVal = jFileChooser.showSaveDialog(ConfigUI.this);
		if(retVal == JFileChooser.APPROVE_OPTION){			
			configFile = jFileChooser.getSelectedFile();
			processAndWriteToXML();				
		}				
		return;
	}

	private boolean isZeroOrPositiveNumber(String contents)
    {
    	try
    	{
    		int value = Integer.valueOf(contents);
    		if(value >= 0)
    			return true;    		
    	}
    	catch(NumberFormatException exception)
    	{
    		return false;
    	}
    	return false;
    }
    

    private boolean isPositiveNumber(String contents) {
		try {
			int value = Integer.valueOf(contents);
			if (value > 0)
				return true;
		} catch (NumberFormatException e) {
			return false;
		}

		return false;
	}
    
      

    private void loadExistingConfigFile(){
    	
    	int retValue = jFileChooser.showOpenDialog(ConfigUI.this);
    	if(retValue == JFileChooser.APPROVE_OPTION){
    		File file = jFileChooser.getSelectedFile();
    		
    		try{
    		Document config = null;
    		DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
    		DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
    		
    		config = docBuilder.parse(file);
    		parseLoadedConfigFile(config);
    		
    		System.out.println(file.getName());
    		}catch(Exception e){
    			e.printStackTrace();
    		}
    	}
    	
    }
    
    
    private void parseLoadedConfigFile(Document config){
    	Node root = config.getDocumentElement();
    	NodeList children = root.getChildNodes();
    	
    	int totalElements = children.getLength();
    	
    	for(int i =0; i < totalElements; i++){
    		Node node = children.item(i);
			String name = node.getNodeName();
			String value = node.getTextContent();
			
			if(name.equals("classNamePrefix"))
				jTextField1.setText(value);
			else if(name.equals("maxNoOfClassFields"))
				jTextField2.setText(value);
			else if(name.equals("minNoOfClassFields"))
				jTextMinNoOfClassFields.setText(value);
			else if(name.equals("probability"))
				jTextField3.setText(value);
			else if(name.equals("totalLOC"))
				jTextField4.setText(value);
			else if (name.equals("maxNestedIfs"))
				jTextField5.setText(value);
			else if(name.equals("maxAllowedMethodCalls"))
				jTextField6.setText(value);
			else if(name.equals("noOfClasses"))
				jTextField7.setText(value);
			else if(name.equals("maxInheritanceDepth"))
				jTextField8.setText(value);
			else if(name.equals("minInheritanceDepth"))
				jTextMinInherit.setText(value);
			else if(name.equals("noOfInheritanceChains"))
				jTextField9.setText(value);
			else if(name.equals("noOfInterfaces"))
				jTextField10.setText(value);
			else if(name.equals("maxInterfacesToImplement"))
				jTextMaxInterfaceToImplement.setText(value);
			else if(name.equals("injectFilename"))
				jTextField11.setText(value);
			else if(name.equals("maxNoOfParametersPerMethod"))
				jTextField12.setText(value);
			else if(name.equals("minNoOfParametersPerMethod"))
				jTextField25.setText(value);
			else if(name.equals("maxNoOfMethodsPerClass"))
				jTextField13.setText(value);
			else if(name.equals("maxNoOfMethodsPerInterface"))
				jTextField14.setText(value);
			else if(name.equals("maxRecursionDepth"))
				jTextField15.setText(value);
			else if(name.equals("allowArray"))
				jTextAllowArray.setText(value);
			else if(name.equals("maxValueForLoop"))
				jTextMaxForLoop.setText(value);
			else if(name.equals("maximumArraySize"))
				jTextField16.setText(value);
			else if(name.equals("intMaxValue"))
				jTextField17.setText(value);
			else if(name.equals("queryFilename"))
				jTextField18.setText(value);
			else if(name.equals("recursionProbability"))
				jTextField19.setText(value);
			else if(name.equals("dbUsername"))
				jTextField20.setText(value);
			else if(name.equals("password"))
				jTextField21.setText(value);
			else if(name.equals("dbName"))
				jTextField22.setText(value);
			else if(name.equals("dbDriver"))
				jTextField23.setText(value);
			else if(name.equals("callType"))
				jTextField24.setText(value);
			else if(name.equals("allowedTypes"))
			{
				NodeList types = node.getChildNodes();
				int noOfTypes = types.getLength();
				
				for(int j = 0; j < noOfTypes; j++){
					Node t = types.item(j);
//					String typeName = t.getNodeName();
					String type = t.getTextContent();
					
					if(type.equals("char"))
						jCheckBox1.setSelected(true);
					else if(type.equals("byte"))
						jCheckBox2.setSelected(true);
					else if(type.equals("short"))
						jCheckBox3.setSelected(true);
					else if(type.equals("int"))
						jCheckBox4.setSelected(true);
					else if(type.equals("long"))
						jCheckBox5.setSelected(true);
					else if(type.equals("float"))
						jCheckBox6.setSelected(true);
					else if(type.equals("double"))
						jCheckBox7.setSelected(true);
					else if(type.equals("String"))
						jCheckBox8.setSelected(true);
					else if(type.equals("Object"))
						jCheckBox9.setSelected(true);
					
				}
			
				continue;
			}
			
	
			
			
    	}
    	
    }
    

    private void processAndWriteToXML()
    {
    	ArrayList<String> allowedTypes = new ArrayList<String>();
    	HashMap<String, String> properties = new HashMap<String, String>();
    	
    	boolean validated = true;
    	ArrayList<String> needsValidation = new ArrayList<String>();
    	
		String className = jTextField1.getText();
		properties.put("classNamePrefix", className);
		
		String maxClassFields = jTextField2.getText();
		properties.put("maxNoOfClassFields", maxClassFields);
		if(!isZeroOrPositiveNumber(maxClassFields))
		{
			validated = false;
			needsValidation.add(jTextField2.getName());
		}
		
		//MinNoOfClassFields
		String minClassFields = jTextMinNoOfClassFields.getText();
		properties.put("minNoOfClassFields", minClassFields);
		if(!isZeroOrPositiveNumber(minClassFields))
		{
			validated = false;
			needsValidation.add(jTextMinNoOfClassFields.getName());
		}
		
		String probability = jTextField3.getText();
		properties.put("probability", probability);
		if(!isZeroOrPositiveNumber(probability))
		{
			validated = false;
			needsValidation.add(jTextField3.getName());
		}
		
		String totalLoc = jTextField4.getText();
		properties.put("totalLOC", totalLoc);
		if(!isZeroOrPositiveNumber(totalLoc))
		{
			validated = false;
			needsValidation.add(jTextField4.getName());
		}
		
		String maxNestedIfs = jTextField5.getText();
		properties.put("maxNestedIfs", maxNestedIfs);
		if(!isZeroOrPositiveNumber(maxNestedIfs))
		{
			validated = false;
			needsValidation.add(jTextField5.getName());
		}
		
		String maxAllowedMethodCalls = jTextField6.getText();
		properties.put("maxAllowedMethodCalls", maxAllowedMethodCalls);
		if(!isZeroOrPositiveNumber(maxAllowedMethodCalls))
		{
			validated = false;
			needsValidation.add(jTextField6.getName());
		}
		
		String noOfClasses = jTextField7.getText();
		properties.put("noOfClasses", noOfClasses);
		if(!isZeroOrPositiveNumber(noOfClasses))
		{
			validated = false;
			needsValidation.add(jTextField7.getName());
		}
		
		String maxInheritanceDepth = jTextField8.getText();
		properties.put("maxInheritanceDepth", maxInheritanceDepth);
		if(!isPositiveNumber(maxInheritanceDepth))
		{
			JOptionPane.showMessageDialog(this, "Put a positive number", "Typo in \"Max. Inheritance Depth\"", JOptionPane.ERROR_MESSAGE);
			return;
		}
		
		//minInheritanceDepth
		String minInheritanceDepth = jTextMinInherit.getText();
		properties.put("minInheritanceDepth", minInheritanceDepth);
		if(!isPositiveNumber(minInheritanceDepth))
		{
			JOptionPane.showMessageDialog(this, "Please provide a positive number.", "Typo in \"Min. Inheritance Depth\"", JOptionPane.ERROR_MESSAGE);
			return;
		}
		
		// Should be: minInheritanceDepth  <= maxInheritanceDepth
		
		if(!isLessThanEqual(minInheritanceDepth, maxInheritanceDepth)){
			JOptionPane.showMessageDialog(this, "Please provide a larger (or equal) value for Max. Inheritance Depth.", "Inheritance Depth: Min. cannot be greater than Max.", JOptionPane.ERROR_MESSAGE);
			return;
		}		
		
		String noOfInheritanceChains = jTextField9.getText();
		properties.put("noOfInheritanceChains", noOfInheritanceChains);
		if(!isZeroOrPositiveNumber(noOfInheritanceChains))
		{
			validated = false;
			needsValidation.add(jTextField9.getName());
		}
		
		String noOfInterfaces = jTextField10.getText();
		properties.put("noOfInterfaces", noOfInterfaces);
		if(!isZeroOrPositiveNumber(noOfInterfaces))
		{
			validated = false;
			needsValidation.add(jTextField10.getName());
		}
		
		String maxInterfacesToImplement = jTextMaxInterfaceToImplement.getText();
		properties.put("maxInterfacesToImplement", maxInterfacesToImplement);
		if(!isZeroOrPositiveNumber(noOfInterfaces))
		{
			validated = false;
			needsValidation.add(jTextMaxInterfaceToImplement.getName());
		}
		if(! isLessThanEqual(maxInterfacesToImplement, noOfInterfaces)){
			JOptionPane.showMessageDialog(this, "Please provide a larger (or equal) value for 'Number of interfaces to generate'.", "Interfaces: Less number of interfaces available for a class to implement.", JOptionPane.ERROR_MESSAGE);
			return;
		}
			
		
		String injectFileName = jTextField11.getText();
		properties.put("injectFilename", injectFileName);
		
		String maxNoOfParameters = jTextField12.getText();
		properties.put("maxNoOfParametersPerMethod", maxNoOfParameters);
		if(!isZeroOrPositiveNumber(maxNoOfParameters))
		{
			validated = false;
			needsValidation.add(jTextField12.getName());
		}
		
		String minNoOfParameters = jTextField25.getText();
		properties.put("minNoOfParametersPerMethod", minNoOfParameters);
		if(!isZeroOrPositiveNumber(minNoOfParameters))
		{
			validated = false;
			needsValidation.add(jTextField25.getName());
		}
		
		if(!isLessThanEqual(minNoOfParameters, maxNoOfParameters)){
			JOptionPane.showMessageDialog(this, "'minNoOfParametersPerMethod' should be less than or equal to 'maxNoOfParametersPerMethod");
			return;
		}
		
		String maxNoOfMethodsPerClass = jTextField13.getText();
		properties.put("maxNoOfMethodsPerClass", maxNoOfMethodsPerClass);
		if(!isZeroOrPositiveNumber(maxNoOfMethodsPerClass))
		{
			validated = false;
			needsValidation.add(jTextField13.getName());
		}
		
		String maxNoOfMethodsPerInterface = jTextField14.getText();
		properties.put("maxNoOfMethodsPerInterface", maxNoOfMethodsPerInterface);
		if(!isZeroOrPositiveNumber(maxNoOfMethodsPerInterface))
		{
			validated = false;
			needsValidation.add(jTextField14.getName());
		}
		
		String maxRecursionDepth = jTextField15.getText();
		properties.put("maxRecursionDepth", maxRecursionDepth);
		if(!isZeroOrPositiveNumber(maxRecursionDepth))
		{
			validated = false;
			needsValidation.add(jTextField15.getName());
		}
		
		String isArrayAllowed = jTextAllowArray.getText().toLowerCase();
//		isArrayAllowed = isArrayAllowed.toLowerCase();
		if( !isArrayAllowed.equals("yes") && !isArrayAllowed.equals("no") )
		{
			JOptionPane.showMessageDialog(this, "Type either YES or NO", "Typo in \"Allow arrays as class field?\"", JOptionPane.ERROR_MESSAGE);
			return;
			
		}			
		properties.put("allowArray", isArrayAllowed); 
		
		if(isArrayAllowed.equals("yes")){
		String maxArraySize = jTextField16.getText();
		properties.put("maximumArraySize", maxArraySize);
			if (!isZeroOrPositiveNumber(maxArraySize)) {
				validated = false;
				needsValidation.add(jTextField16.getName());
			}
		}
		else // To avoid parsing error in ConfigurationXMLParser::getPropertyAsInt
			properties.put("maximumArraySize", "2");
		
		//maxValueForLoop
		String maxValueForLoop = jTextMaxForLoop.getText();
		properties.put("maxValueForLoop", maxValueForLoop);
		if(!isZeroOrPositiveNumber(maxValueForLoop))
		{
			validated = false;
			needsValidation.add(jTextMaxForLoop.getName());
		}
		
		String  maxIntegerLiteral = jTextField17.getText();
		properties.put("intMaxValue", maxIntegerLiteral);
		if(!isZeroOrPositiveNumber(maxIntegerLiteral))
		{
			validated = false;
			needsValidation.add(jTextField17.getName());
		}
		
		String queryFilename = jTextField18.getText();
		properties.put("queryFilename", queryFilename);
		properties.put("useQueries", "true");
		if(queryFilename.equals(""))
		{
			properties.put("useQueries", "false");
		}
		
		String recursionProbability = jTextField19.getText();
		properties.put("recursionProbability", recursionProbability);
		if(!isZeroOrPositiveNumber(recursionProbability))
		{
			validated = false;
			needsValidation.add(jTextField19.getName());
		}
		
		properties.put("dbUsername", jTextField20.getText());
		properties.put("password", jTextField21.getText());
		properties.put("dbName", jTextField22.getText());
		properties.put("dbDriver", jTextField23.getText());
				
		if(!validated)
		{
			Object[] objArray = needsValidation.toArray();
			JOptionPane.showMessageDialog(this, objArray, "Positive integer or Zero expected for:", JOptionPane.ERROR_MESSAGE);
			return;
		}
		
		int probabilityAsInteger = Integer.valueOf(probability);
		if(! (0 <= probabilityAsInteger && probabilityAsInteger <= 100) )
		{
			JOptionPane.showMessageDialog(this, "Enter value between 0 and 100 for probability.", 
					"Validation Error", JOptionPane.ERROR_MESSAGE);
			return;
		}
		
		int recursionProbabilityAsInteger = Integer.valueOf(recursionProbability);
		if(! (0 <= recursionProbabilityAsInteger && recursionProbabilityAsInteger <= 100) )
		{
			JOptionPane.showMessageDialog(this, "Enter value between 0 and 100 for recursion probability.", 
					"Validation Error", JOptionPane.ERROR_MESSAGE);
			return;
		}
		
		int inheritanceDepthAsNumber = Integer.valueOf(maxInheritanceDepth);
		int noOfInheritanceChainsAsNumber = Integer.valueOf(noOfInheritanceChains);
		int noOfClassAsNumber = Integer.valueOf(noOfClasses);
		if(noOfClassAsNumber < (inheritanceDepthAsNumber*noOfInheritanceChainsAsNumber))
		{
			String labelString = "Number of classes should be equal to or more than (inheritanceDepth * no. of Inheritance Chains)";
			JOptionPane.showMessageDialog(this, labelString, "Validation Error", JOptionPane.ERROR_MESSAGE);
			return;
		}
		
		String callType = jTextField24.getText();
		if(!(callType.equals("MCO1_1")
				|| callType.equals("MCO1_2")
				|| callType.equals("MCO2_1")
				|| callType.equals("MCO2_2")))
		{
			String labelString = "Call type should be one of: MCO1_1, MCO1_2, MCO2_1, MCO2_2";
			JOptionPane.showMessageDialog(this, labelString, "Validation Error", JOptionPane.ERROR_MESSAGE);
			return;
		}
		properties.put("callType", callType);
		
		//AllowIndirectRecursion
		String allowIndirectRecursion = jTextAllowIndirectRecursion.getText().toLowerCase();
		if( !allowIndirectRecursion.equals("yes") && !allowIndirectRecursion.equals("no") )
		{
			JOptionPane.showMessageDialog(this, "Type either YES or NO", "Typo in \"Allow indirect recursion?\"", JOptionPane.ERROR_MESSAGE);
			return;			
		}	
		properties.put("allowIndirectRecursion", allowIndirectRecursion);
		
		String doReachabilityMatrix = jTextReachability.getText().toLowerCase();
		if( !doReachabilityMatrix.equals("yes") && !doReachabilityMatrix.equals("no") )
		{
			JOptionPane.showMessageDialog(this, "Type either YES or NO", "Typo in \"Create Reachability Matrix?\"", JOptionPane.ERROR_MESSAGE);
			return;
			
		}			
		properties.put("doReachabilityMatrix", doReachabilityMatrix); 
			
		boolean isChecked = false;
				
		if(jCheckBox1.isSelected())
		{
			allowedTypes.add(jCheckBox1.getName());
			isChecked = true;
		}
		
		if(jCheckBox2.isSelected())
		{
			allowedTypes.add(jCheckBox2.getName());
			isChecked = true;
		}
		
		if(jCheckBox3.isSelected())
		{
			allowedTypes.add(jCheckBox3.getName());
			isChecked = true;
		}
		
		if(jCheckBox4.isSelected())
		{
			allowedTypes.add(jCheckBox4.getName());
			isChecked = true;
		}
		
		if(jCheckBox5.isSelected())
		{
			allowedTypes.add(jCheckBox5.getName());
			isChecked = true;
		}
		
		if(jCheckBox6.isSelected())
		{
			allowedTypes.add(jCheckBox6.getName());
			isChecked = true;
		}
		
		if(jCheckBox7.isSelected())
		{
			allowedTypes.add(jCheckBox7.getName());
			isChecked = true;
		}
		
		if(jCheckBox8.isSelected())
		{
			allowedTypes.add(jCheckBox8.getName());
			isChecked = true;
		}
		
		if(jCheckBox9.isSelected())
		{
			allowedTypes.add(jCheckBox9.getName());
			isChecked = true;
		}
		
		if(!isChecked)
		{
			String labelString = "Atleast one type needs to be selected!";
			JOptionPane.showMessageDialog(this, labelString, "Validation Error", JOptionPane.ERROR_MESSAGE);
			return;
		}
				
		writeToConfigXML(properties, allowedTypes);
//		String[] args = {};
//		String labelString = "Interface and class generation started. Refer the console for logs and progress.";
//		JOptionPane.showMessageDialog(this, labelString, "Information", JOptionPane.INFORMATION_MESSAGE);
//		this.setVisible(false);
//		Start.main(args);
//		System.exit(0);
    }
    
    private boolean isLessThanEqual(String lhs,
			String rhs) {
    	try{
    		int lhsValue = Integer.parseInt(lhs);
    		int rhsValue = Integer.parseInt(rhs);
    		
    		if(lhsValue <= rhsValue)
    			return true;    		
    	}catch(NumberFormatException e){
    		return false;
    	} 	  
	
		return false;
	}

	private void writeToConfigXML(HashMap<String, String> properties,
    		ArrayList<String> allowedTypes)
    {
    	String xmlString = getXMLString(properties, allowedTypes);
    	
//    	File file = new File("config.xml");
    	BufferedOutputStream bufferedStream = null;
    	try 
    	{
			if(configFile.createNewFile())
			{
				System.out.println("Creating config.xml");
			}
			
			FileOutputStream outstream = new FileOutputStream(configFile);
			bufferedStream = new BufferedOutputStream(outstream);
			bufferedStream.write(xmlString.getBytes());
		} 
    	catch (IOException e) 
    	{
			System.out.println("Error preparing config.xml");
			e.printStackTrace();
		}
    	finally
    	{
    		if(bufferedStream != null)
    		{
    			try 
    			{
					bufferedStream.flush();
					bufferedStream.close();
				} 
    			catch (IOException e) 
    			{
					System.out.println("Error writing config to XML.");
					e.printStackTrace();
				}
    		}
    	}
    }
    
    private String getXMLString(HashMap<String, String> properties,
    		ArrayList<String> allowedTypes)
    {
    	StringBuilder builder = new StringBuilder();
    	builder.append("<RUGRAT>\n");
    	    	
    	Set<String> keyset = properties.keySet();
    	for(String key : keyset)
    	{
    		builder.append("<" + key + ">");
    		builder.append(properties.get(key));
    		builder.append("</" + key + ">\n");
    	}
    	
    	builder.append("<allowedTypes>\n");
    	for(String allowedType : allowedTypes)
    	{
    		builder.append("\t<type>");
    		builder.append(allowedType);
    		builder.append("</type>\n");
    	}
    	builder.append("</allowedTypes>\n");
    	
    	builder.append("</RUGRAT>");
    	
    	return builder.toString();
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               ConfigUI frame = new ConfigUI();
               frame.setVisible(true);
               frame.toFront(); // to bring the frame in front.
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JPanel				jPanel1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonLoad;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JFileChooser jFileChooser;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JCheckBox jCheckBox8;
    private javax.swing.JCheckBox jCheckBox9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;  
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField14;
    private javax.swing.JTextField jTextField15;
    private javax.swing.JTextField jTextField16;
    private javax.swing.JTextField jTextField17;
    private javax.swing.JTextField jTextField18;
    private javax.swing.JTextField jTextField19;
    private javax.swing.JTextField jTextField20;
    private javax.swing.JTextField jTextField21;
    private javax.swing.JTextField jTextField22;
    private javax.swing.JTextField jTextField23;
    private javax.swing.JTextField jTextField24;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    // minNoOfParameters
    private javax.swing.JTextField jTextField25;
    private javax.swing.JLabel jLabel26;
    
    //minInheritDepth
    private javax.swing.JTextField jTextMinInherit;
    private javax.swing.JLabel jLabelMinInherit;
    
    //maxValueForLoop
    private javax.swing.JTextField jTextMaxForLoop;
    private javax.swing.JLabel jLabelMaxForLoop;
    
    //AllowArrayAsClassField
    private javax.swing.JTextField jTextAllowArray;
    private javax.swing.JLabel jLabelAllowArray;
    
    //minNoOfClassFields
    private javax.swing.JTextField jTextMinNoOfClassFields;
    private javax.swing.JLabel jLabelMinNoOfClassFields;
    
    //doReachabilityMatrix
    private javax.swing.JTextField jTextReachability;
    private javax.swing.JLabel jLabelReachability;
    
    // maxInterfacesToImplement
    private javax.swing.JTextField jTextMaxInterfaceToImplement;
    private javax.swing.JLabel jLabelMaxInterfaceToImplement;
    
    //AllowIndirectRecursion
    private javax.swing.JTextField jTextAllowIndirectRecursion;
    private javax.swing.JLabel jLabelAllowIndirectRecursion;
   
    // End of variables declaration//GEN-END:variables
}
